- hosts: all
  collections:
    - fortinet.fortimanager
  connection: httpapi
  vars:
     ansible_httpapi_use_ssl: True
     ansible_httpapi_validate_certs: False
     ansible_httpapi_port: 443
     
   
  tasks:
    - name: Generate Access Token From FortiCloud Auth Server.
      uri:
        url: https://customerapiauth.fortinet.com/api/v1/oauth/token/
        method: POST
        body_format: json
        return_content: true
        headers:
          Content-Type: application/json
        body: '{"username": "{{ FORTICLOUD_APIID }}", "password": "{{ FORTICLOUD_PASSWD }}", "client_id": "FortiManager", "grant_type": "password"}'
      register: tokeninfo

#---------------------------------------------------------------------------------------

    - name: Add model device {{adom}}/{{fgt}}
      fmgr_generic:
        forticloud_access_token: '{{ tokeninfo.json.access_token }}'
        method: exec
        #bypass_validation: True
        params:
          - url: '/dvm/cmd/add/device'
            data:
              adom: '{{adom}}'
              flags: [ create_task , nonblocking ]
              device:
                  desc:
                  mgmt_mode: 'fmg'
                  model_device: 1
                  flags: [ is_model, linked_to_model ]
                  add_model: 1
                  name: '{{fgt_name}}'
                  sn: "{{fgt_sn}}"
                  os_type: 'fos'
                  os_ver: '6.0'
                  mr: 4
                  patch: 7
                  meta fields:
                    Address: "{{address}}"
                    HOSTNAME: "{{fgt_name}}"
                    LOOPBACK0: "{{loopback0}}"
                    Fairbank: "{{fairbank}}"
                    GSS-POS : "{{gss-pos}}"
                    GSS-INTERNET: "{{gss-internet}}"
                    Fairbank-NET: "{{fairbank-net}}"
                    GSS-POS-NET: "{{gss-pos-net}}"
                    GSS-INTERNET-NET: "{{gss-internet-net}}"
                    VPN_DSL_GH_IP: "10.100.1.{{shopid}}"
                    VPN_DSL_FRA_IP: "10.100.2.{{shopid}}"
                    VPN_LTE_GH_IP: "10.100.3.{{shopid}}"
                    VPN_LTE_FRA_IP: "10.100.4.{{shopid}}"
                    FGT_SN: "{{fgt_sn}}"
                    DSL_PSK: "{{dsl_psk}}"
                    DSL_USER: "{{dsl_user}}"
                    DSL_PASSWORD: "{{dsl_password}}"
                    LTE_PSK: "{{lte_psk}}"
                    LTE_USER: "{{lte_user}}"
                    LTE_PASSWORD: "{{lte_password}}"
            
                 
      register: fmgtask

    - name: Wait for add device task
      fmgr_fact:
        forticloud_access_token: '{{ tokeninfo.json.access_token }}'
        facts:
            selector: 'task_task'
            params:
                task: '{{fmgtask.meta.response_data.taskid}}'
      register: taskinfo
      until: taskinfo.meta.response_data.percent == 100
      retries: 30
      delay: 5
      failed_when: taskinfo.meta.response_data.state == 'error' and 'devsnexist' not in taskinfo.meta.response_data.line[0].detail

     
    - name: Set auto-link mode on model device
      fmgr_generic:
        forticloud_access_token: '{{ tokeninfo.json.access_token }}'
        method: update
        params:
          - url: '/dvmdb/adom/{{adom}}/device/{{fgt_name}}'
            data:
              flags: [ is_model, linked_to_model ]
              

#---------------------------------------------------------------------------------------
    - name: Run script {{script_dev}} on model dev {{fgt}}
      fmgr_generic:
        forticloud_access_token: '{{ tokeninfo.json.access_token }}'
        method: exec
        params:
          - url: '/dvmdb/adom/{{adom}}/script/execute'
            data:
              adom: '{{adom}}'
              scope:
                - name: '{{fgt_name}}'
                  vdom: global
              script: '{{pre_script}}'

      register: fmgtask

    - name: Wait for run script on model device task
      fmgr_fact:
        forticloud_access_token: '{{ tokeninfo.json.access_token }}'
        facts:
            selector: 'task_task'
            params:
                task: '{{fmgtask.meta.response_data.task}}'
      register: taskinfo
      until: taskinfo.meta.response_data.percent == 100
      retries: 30
      delay: 5
      failed_when: taskinfo.meta.response_data.state == 'error'

#---------------------------------------------------------------------------------------
